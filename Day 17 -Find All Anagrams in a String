
 class Solution {
    /*this is one such approach I call it the templated approach for sliding window now I am trying to optimize it 
    public List<Integer> findAnagrams(String s, String p) {
    List<Integer> result=new ArrayList<>();
        int windowStart=0,matched=0;
        Map<Character,Integer>charFrequencyMap=new HashMap<>();
        for(char ch:p.toCharArray())
            charFrequencyMap.put(ch,charFrequencyMap.getOrDefault(ch,0)+1);
            
        
        for(int windowEnd=0;windowEnd<s.length();windowEnd++ ){
            char rightChar=s.charAt(windowEnd);
            if(charFrequencyMap.containsKey(rightChar)){
                charFrequencyMap.put(rightChar,charFrequencyMap.get(rightChar)-1);
            if(charFrequencyMap.get(rightChar)==0)matched++;}
            if(matched==charFrequencyMap.size())
                result.add(windowStart);
            if(windowEnd>=p.length()-1){

                char leftChar=s.charAt(windowStart++);
                if(charFrequencyMap.containsKey(leftChar)){
                    
                  if(charFrequencyMap.get(leftChar)==0)matched--;
                    charFrequencyMap.put(leftChar,charFrequencyMap.get(leftChar)+1);
                }
                
                
                
            }
            
                
        }
        return result;
    }*/
    
   //optimized approach
     public List<Integer> findAnagrams(String s, String p) {
         if(s==null||p==null)return Collections.emptyList();
         int m=p.length(),n=s.length();
         if(m>n)return Collections.emptyList();
         int []sCount,pCount;
         sCount=new int[26];
         pCount=new int[26];
         for(int i=0;i<m;i++)
             pCount[p.charAt(i)-'a']++;
         int windowStart=0;
         List<Integer>result=new ArrayList<>();
         for(int windowEnd=0;windowEnd<n;windowEnd++){
              sCount[s.charAt(windowEnd)-'a']++;
             if(windowEnd<m-1)continue;
             
             if(windowEnd>=m){
                 sCount[s.charAt(windowStart)-'a']--;
                 windowStart++;
             }
             boolean found=true;
             for(int i=0;i<26;i++)
             {
                 if(sCount[i]!=pCount[i]){
                     found=false;
                     break;
                                         
                 }
             }
              
                 
                    if(found)result.add(windowStart);
             }
return result;
         }
         
         
     }
