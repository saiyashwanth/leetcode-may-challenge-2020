class TrieNode{
    TrieNode []children;
    boolean isEndOfWord;
    TrieNode(){
      children=new TrieNode[26];
       isEndOfWord=false; 
    }
    
}



class Trie {

    /** Initialize your data structure here. */
    TrieNode root;
    public Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode pCrawl=root;
        for(int i=0;i<word.length();i++){
            if(pCrawl.children[word.charAt(i)-'a']==null)
                pCrawl.children[word.charAt(i)-'a']=new TrieNode();
            pCrawl=pCrawl.children[word.charAt(i)-'a'];
                

        }
        pCrawl.isEndOfWord=true;
        
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode p=find(word);
        return p!=null&&p.isEndOfWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
            TrieNode p=find(prefix);
        return p!=null;
        
    }
    
    
    public TrieNode find(String word){
         TrieNode pCrawl=root;
        for(int i=0;i<word.length();i++){
            if(pCrawl.children[word.charAt(i)-'a']==null)return null;
                pCrawl=pCrawl.children[word.charAt(i)-'a'];
          
        }
        return pCrawl;

    }
    
    
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
